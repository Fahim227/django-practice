Run Celery Beat:

python -m celery -A DjangoPracticeProject beat

Run Celery Workers:

python -m celery -A DjangoPracticeProject worker -P gevent   [gevent==22.10.2]


# Docker

ToBuildImage: docker build --tag django-practice .

ToBuildContainer: docker run -publish 8080:8080 django-practice

To Run Compose: docker-compose run --rm app

To see all images: docker images
To see all running containers: docker ps

# Docker Compose

To build the docker Compose file with docker File: docker-compose build

Then : docker-compose run --rm app django-admin startproject DjangoPractice .

Then : docker-compose up

Part#1
docker build --tag python-django .
docker run --publish 8000:8000 python-django
Part#2
docker-compose build
docker-compose run --rm app django-admin startproject core .
docker-compose up
Part#3
docker-compose build
docker-compose run --rm app django-admin startproject core .
docker-compose up
docker exec -it django_container /bin/bash
Part#4
docker-compose run django_app sh -c "django-admin startapp newapp ."
docker exec -it django_app sh

#Run Celery Task
    python manage.py shell
    from newapp.tasks import add
    add.delay(2, 2)

Info:
PYTHONUNBUFFERED:
Setting the non-empty value of PYTHONUNBUFFERED means 
that the python output is transmitted directly to the 
terminal without being buffered and that allows displaying 
the applicationâ€™s output in real-time. 
